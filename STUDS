using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ListView;
using System.Net;


namespace Senador_SemifinalActivity2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            string idNumber = txtIDNumber.Text;
            string firstName = txtFirstName.Text;
            string lastName = txtLastName.Text;
            string middleName = txtMiddleName.Text;
            string course = txtCourse.Text;
            string yearLevel = txtYearLevel.Text;
            string birthday = dtpBirthday.Value.ToString("yyyy/MM/dd");

            if (!ValidateIDNumber(idNumber))
            {
                MessageBox.Show("ID Number must be numeric.");
                return;
            }
            if (!ValidateFirstName(firstName))
            {
                MessageBox.Show("First Name cannot contain special characters.");
                return;
            }
            if (!ValidateYearLevel(yearLevel))
            {
                MessageBox.Show("Year Level must be numeric.");
                return;
            }
            if (!ValidateBirthday(birthday))
            {
                MessageBox.Show("Invalid Birthday format.");
                return;
            }
            string studentRecord = $"ID Number: {idNumber}, " +
                           $"First Name: {firstName}, " +
                           $"Last Name: {lastName}, " +
                           $"Middle Name: {middleName}, " +
                           $"Course: {course}, " +
                           $"Year Level: {yearLevel}, " +
                           $"Birthday: {birthday}";

            //string studentRecord = $"{idNumber},{firstName},{lastName},{middleName},{course},{yearLevel},{birthday}";

            try
            {
                File.AppendAllText("student_record.txt", studentRecord + Environment.NewLine);
                MessageBox.Show("Student record saved successfully!");
                ClearForm();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving data: {ex.Message}");
            }
        
    }
        private bool ValidateIDNumber(string idNumber)
        {
            return Regex.IsMatch(idNumber, @"^\d+$");
        }

        private bool ValidateFirstName(string firstName)
        {
            return Regex.IsMatch(firstName, @"^[a-zA-Z- ]+$");
        }

        private bool ValidateYearLevel(string yearLevel)
        {
            return Regex.IsMatch(yearLevel, @"^\d+$");
        }

        private bool ValidateBirthday(string birthday)
        {
            DateTime parsedDate;
            return DateTime.TryParse(birthday, out parsedDate);
        }

        private void ClearForm()
        {
            txtIDNumber.Clear();
            txtFirstName.Clear();
            txtLastName.Clear();
            txtMiddleName.Clear();
            txtCourse.Clear();
            txtYearLevel.Clear();
            dtpBirthday.Value = DateTime.Now;
        }
    }
}
